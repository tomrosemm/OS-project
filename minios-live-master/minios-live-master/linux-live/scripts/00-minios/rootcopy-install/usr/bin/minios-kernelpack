#!/bin/bash
# This script creates a SquashFS image with the kernel modules and initramfs image.
# Author: crims0n <https://minios.dev>

# Set strict error handling
set -euo pipefail

# Function to display help message
show_help() {
    cat <<EOF
Creates a SquashFS image with the kernel modules and an initramfs image.
Usage: $0 [OPTIONS]

Options:
  --help        Show this help message and exit

EOF
    exit 0
}

# Function to print a step message
print_step() {
    echo -e "\033[1;32m*  $1...\033[0m"
}

# Function to print an informational message
print_info() {
    echo -e "\033[1;34m   $1\033[0m"
}

# Function to print an error message
print_error() {
    echo -e "\033[1;31mE: $1\033[0m" >&2
}

# Function to select the kernel version
select_kernel() {
    print_step "Selecting kernel version"
    mapfile -t KERNELS < <(ls /lib/modules)
    print_info "Installed kernels found: ${KERNELS[*]}"
    OPTIONS=()
    for KERNEL in "${KERNELS[@]}"; do
        OPTIONS+=("$KERNEL" "")
    done
    KERNEL=$(whiptail --title "Select the Kernel" --menu "Choose a kernel:" 15 60 4 "${OPTIONS[@]}" 3>&1 1>&2 2>&3)
    if [ -z "$KERNEL" ]; then
        print_error "No kernel selected. Exiting."
        exit 1
    fi
    print_info "Selected kernel: $KERNEL"
}

# Function to check for available compression methods
check_compression_tools() {
    declare -A tools=(
        ["lz4"]="lz4"
        ["lzo"]="lzop"
        ["gzip"]="gzip"
        ["zstd"]="zstd"
        ["lzma"]="lzma"
        ["xz"]="xz"
        ["bzip2"]="bzip2"
    )

    AVAILABLE_COMPRESSIONS=()
    for tool in "${!tools[@]}"; do
        if command -v "${tools[$tool]}" &> /dev/null; then
            AVAILABLE_COMPRESSIONS+=("$tool")
        fi
    done
}

# Function to sort compression methods by speed
sort_compressions_by_speed() {
    local speed_order=("lz4" "lzo" "gzip" "zstd" "lzma" "xz" "bzip2")
    SORTED_COMPRESSIONS=()

    for method in "${speed_order[@]}"; do
        for available in "${AVAILABLE_COMPRESSIONS[@]}"; do
            if [ "$method" == "$available" ]; then
                SORTED_COMPRESSIONS+=("$method")
            fi
        done
    done
}

# Function to select the SquashFS compression method
select_squashfs_compression() {
    print_step "Selecting compression type for SquashFS"
    check_compression_tools
    sort_compressions_by_speed

    COMP_OPTIONS=()
    for comp in "${SORTED_COMPRESSIONS[@]}"; do
        case $comp in
            lz4)   COMP_OPTIONS+=("lz4" "Extreme speed, least compression ratio") ;;
            lzo)   COMP_OPTIONS+=("lzo" "Very fast compression, less compression ratio") ;;
            gzip)  COMP_OPTIONS+=("gzip" "Fast compression, moderate compression ratio") ;;
            zstd)  COMP_OPTIONS+=("zstd" "Balanced speed and compression ratio") ;;
            lzma)  COMP_OPTIONS+=("lzma" "Slow compression, high compression ratio") ;;
            xz)    COMP_OPTIONS+=("xz" "Slowest compression, highest compression ratio") ;;
        esac
    done

    SQFS_COMP=$(whiptail --title "SquashFS Compression" --menu "Choose a compression method:" 25 100 7 "${COMP_OPTIONS[@]}" 3>&1 1>&2 2>&3)
    if [ -z "$SQFS_COMP" ]; then
        print_error "No compression method selected for SquashFS. Exiting."
        exit 1
    fi
    if [ $SQFS_COMP = "zstd" ]; then
        SQFS_COMP_PARAMS="-Xcompression-level 19"
    elif [ $SQFS_COMP = "xz" ]; then
        SQFS_COMP_PARAMS="-Xbcj x86"
    else
        SQFS_COMP_PARAMS=""
    fi
    print_info "Selected SquashFS compression: $SQFS_COMP"
}

select_initrd_compression() {
    print_step "Selecting compression type for initrd"
    check_compression_tools
    sort_compressions_by_speed

    COMP_OPTIONS=()
    for comp in "${SORTED_COMPRESSIONS[@]}"; do
        case $comp in
            lz4)   COMP_OPTIONS+=("lz4" "Extreme speed, least compression ratio") ;;
            lzo)   COMP_OPTIONS+=("lzo" "Very fast compression, low compression ratio") ;;
            gzip)  COMP_OPTIONS+=("gzip" "Fast compression, moderate compression ratio") ;;
            lzma)  COMP_OPTIONS+=("lzma" "Slow compression, high compression ratio") ;;
            xz)    COMP_OPTIONS+=("xz" "Slowest compression, highest compression ratio") ;;
            bzip2) COMP_OPTIONS+=("bzip2" "Very slow compression, slightly higher compression ratio than xz") ;;
        esac
    done

    INITRD_COMP=$(whiptail --title "Initrd Compression" --menu "Choose a compression method:" 25 100 7 "${COMP_OPTIONS[@]}" 3>&1 1>&2 2>&3)
    if [ -z "$INITRD_COMP" ]; then
        print_error "No compression method selected for initrd. Exiting."
        exit 1
    fi
    print_info "Selected initrd compression: $INITRD_COMP"
}

# Function to determine the path to the vmlinuz file and copy it
copy_vmlinuz() {
    print_step "Determining path to vmlinuz file"
    if [ -f "/boot/vmlinuz-$KERNEL" ]; then
        VMLINUZ_PATH="/boot/vmlinuz-$KERNEL"
    elif [ -f "/run/initramfs/memory/data/minios/boot/vmlinuz-$KERNEL" ]; then
        VMLINUZ_PATH="/run/initramfs/memory/data/minios/boot/vmlinuz-$KERNEL"
    elif [ -f "/run/initramfs/memory/data/minios/boot/vmlinuz" ]; then
        VMLINUZ_PATH="/run/initramfs/memory/data/minios/boot/vmlinuz"
    elif [ -f "/run/initramfs/memory/toram/minios/boot/vmlinuz-$KERNEL" ]; then
        VMLINUZ_PATH="/run/initramfs/memory/toram/minios/boot/vmlinuz-$KERNEL"
    elif [ -f "/run/initramfs/memory/toram/minios/boot/vmlinuz" ]; then
        VMLINUZ_PATH="/run/initramfs/memory/toram/minios/boot/vmlinuz"
    fi
    if [ -z "$VMLINUZ_PATH" ] || [ ! -f "$VMLINUZ_PATH" ]; then
        print_error "The vmlinuz file for the selected kernel does not exist."
        exit 1
    fi
    print_step "Copying vmlinuz image"
    cp "$VMLINUZ_PATH" "$CURRENT_DIR/vmlinuz-$KERNEL"
    if [ $? -ne 0 ]; then
        print_error "Failed to copy vmlinuz image."
        exit 1
    fi
    print_info "Vmlinuz image copied: vmlinuz-$KERNEL"
}

# Function to determine the modules directory
determine_modules_directory() {
    print_step "Determining modules directory"
    if [ -d "/usr/lib/modules/$KERNEL" ]; then
        MOD_DIR="/usr/lib/modules"
    elif [ -d "/lib/modules/$KERNEL" ]; then
        MOD_DIR="/lib/modules"
    else
        print_error "The modules directory does not exist."
        exit 1
    fi
}

# Function to create the SquashFS file for kernel modules
create_squashfs() {
    print_step "Creating SquashFS file for kernel modules"
    SQFS_VER=$(mksquashfs -version 2>&1 | head -n1 | grep -oP '\d+\.\d+')
    SQFS_MAJ=$(echo $SQFS_VER | cut -d'.' -f1)
    SQFS_MIN=$(echo $SQFS_VER | cut -d'.' -f2)
    if [ -f "$CURRENT_DIR/01-kernel-$KERNEL.sb" ]; then
        rm "$CURRENT_DIR/01-kernel-$KERNEL.sb"
    fi
    if [[ $SQFS_MAJ -gt 4 || ($SQFS_MAJ -eq 4 && $SQFS_MIN -ge 5) ]]; then
        mksquashfs "/usr/lib/modules/$KERNEL" "$CURRENT_DIR/01-kernel-$KERNEL.sb" -comp $SQFS_COMP $SQFS_COMP_PARAMS -b 1024K -always-use-fragments -noappend -quiet -progress -no-strip
    else
        mkdir -p "$TEMP_DIR/kernel/$MOD_DIR"
        cp -r "/lib/modules/$KERNEL" "$TEMP_DIR/kernel/$MOD_DIR"
        if [ $? -ne 0 ]; then
            print_error "Failed to copy modules directory."
            exit 1
        fi
        mksquashfs "$TEMP_DIR/kernel" "$CURRENT_DIR/01-kernel-$KERNEL.sb" -comp $SQFS_COMP $SQFS_COMP_PARAMS -b 1024K -always-use-fragments -noappend -quiet -progress
        if [ $? -ne 0 ]; then
            print_error "Failed to create SquashFS file."
            exit 1
        fi
        rm -rf "$TEMP_DIR/kernel"
    fi
    print_info "SquashFS file created: 01-kernel-$KERNEL.sb"
}

# Function to create the initramfs image
create_initramfs() {
    print_step "Creating initramfs image"
    INITRAMFS_PATH=$(/run/initramfs/mkinitrfs "$KERNEL" "$INITRD_COMP")
    if [ $? -ne 0 ]; then
        print_error "Failed to create initramfs image."
        exit 1
    fi
    cp "$INITRAMFS_PATH" "$CURRENT_DIR/initrfs-$KERNEL.img"
    if [ $? -ne 0 ]; then
        print_error "Failed to copy initramfs image."
        exit 1
    fi
    print_info "Initramfs image created: initrfs-$KERNEL.img"
}

# Function to clean up temporary files
cleanup() {
    print_step "Cleaning up temporary files"
    if [ -f "$TEMP_DIR/livekit/initramfs.log" ]; then
        cp "$TEMP_DIR/livekit/initramfs.log" "$CURRENT_DIR/initramfs-$KERNEL.log"
    fi
    rm -rf "$TEMP_DIR"
    print_info "Cleanup complete."
}

# Main script execution
# Check for --help option
if [[ "${1-}" == "--help" ]]; then
    show_help
fi

# Check for root privileges
if [[ "$EUID" -ne 0 ]]; then
    print_error "This script must be run as root."
    exit 1
fi

# Declare variables
TEMP_DIR=$(mktemp -d)
CURRENT_DIR="$PWD"
MOD_DIR=""
VMLINUZ_PATH=""
KERNEL=""

# Set trap for cleanup on exit
trap cleanup EXIT

# Execute function calls
select_kernel
select_squashfs_compression
select_initrd_compression
copy_vmlinuz
determine_modules_directory
create_squashfs
create_initramfs
